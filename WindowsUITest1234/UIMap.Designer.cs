// ------------------------------------------------------------------------------
//  <auto-generated>
//      此代码由编码的 UI 测试生成器生成。
//      版本: 15.0.0.0
//
//      如果重新生成代码，则更改此文件可能会导致错误的行为，
//      并将丢失这些更改。
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace WindowsUITest1234
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// 输入年月日计算星期
        /// </summary>
        public void AssertInputDate()
        {
            #region Variable Declarations
            WinText uI请在年月日中输入数字Text = this.UIDateTime的使用Window.UI请在年月日中输入数字Window.UI请在年月日中输入数字Text;
            #endregion

            // 确认 “请在年、月、日中输入数字!” 标签 包含“请在年、月、日中输入数字!”的“DisplayText”属性
            StringAssert.Contains(uI请在年月日中输入数字Text.DisplayText, this.AssertInputDateExpectedValues.UI请在年月日中输入数字TextDisplayText, "输入年月日计算星期断言失败");
        }
        
        /// <summary>
        /// 输入年月日计算n天后日期的断言
        /// </summary>
        public void AssertInputDate_Days()
        {
            #region Variable Declarations
            WinText uI请在年月日中输入数字Text = this.UIDateTime的使用Window.UI请在年月日中输入数字Window.UI请在年月日中输入数字Text;
            #endregion

            // 确认 “请在年、月、日中输入数字!” 标签 等于“请在年、月、日中输入数字!”的“DisplayText”属性
            Assert.AreEqual(this.AssertInputDate_DaysExpectedValues.UI请在年月日中输入数字TextDisplayText, uI请在年月日中输入数字Text.DisplayText, "输入年月日计算n天后日期断言失败");
        }
        
        /// <summary>
        /// 计算n天后日期的断言
        /// </summary>
        public void AssertInputDate_Days1()
        {
            #region Variable Declarations
            WinText uIItem2019年3月26日星期二Text = this.UIDateTime的使用Window.UIItem2019年3月26日星期二Window.UIItem2019年3月26日星期二Text;
            #endregion

            // 确认 “2019年3月26日 星期二” 标签 包含“2019年5月23日 星期四”的“DisplayText”属性
            StringAssert.Contains(uIItem2019年3月26日星期二Text.DisplayText, this.AssertInputDate_Days1ExpectedValues.UIItem2019年3月26日星期二TextDisplayText, "计算n天后日期的断言失败");
        }
        
        /// <summary>
        /// AssertMonday - 使用“AssertMondayExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void AssertMonday()
        {
            #region Variable Declarations
            WinText uIMondayText = this.UIDateTime的使用Window.UI请在年月日中输入数字Window.UIMondayText;
            #endregion

            // 确认 “Monday” 标签 等于“Monday”的“DisplayText”属性
            Assert.AreEqual(this.AssertMondayExpectedValues.UIMondayTextDisplayText, uIMondayText.DisplayText);
        }
        
        /// <summary>
        /// Assert合法日期 - 使用“Assert合法日期ExpectedValues”将参数传递到此方法中。
        /// </summary>
        public void Assert合法日期()
        {
            #region Variable Declarations
            WinText uI请输入合法的日期Text = this.UIDateTime的使用Window.UI请在年月日中输入数字Window.UI请输入合法的日期Text;
            #endregion

            // 确认 “请输入合法的日期！” 标签 等于“请输入合法的日期！”的“DisplayText”属性
            Assert.AreEqual(this.Assert合法日期ExpectedValues.UI请输入合法的日期TextDisplayText, uI请输入合法的日期Text.DisplayText);
        }
        
        /// <summary>
        /// 输入年月日计算星期的断言
        /// </summary>
        public void Assert年月日()
        {
            #region Variable Declarations
            WinText uI请在年月日中输入数字Text = this.UIDateTime的使用Window.UI请在年月日中输入数字Window.UI请在年月日中输入数字Text;
            #endregion

            // 确认 “请在年、月、日中输入数字!” 标签 等于“请在年、月、日中输入数字!”的“DisplayText”属性
            Assert.AreEqual(this.Assert年月日ExpectedValues.UI请在年月日中输入数字TextDisplayText, uI请在年月日中输入数字Text.DisplayText, "年月日断言失败");
        }
        
        /// <summary>
        /// 输入年月日计算星期
        /// </summary>
        public void RecordedInputDate()
        {
            #region Variable Declarations
            WinEdit uITxtYearEdit = this.UIDateTime的使用Window.UITxtYearWindow.UITxtYearEdit;
            WinEdit uITxtMonthEdit = this.UIDateTime的使用Window.UITxtMonthWindow.UITxtMonthEdit;
            WinEdit uITxtDayEdit = this.UIDateTime的使用Window.UITxtDayWindow.UITxtDayEdit;
            WinButton uI计算星期Button = this.UIDateTime的使用Window.UI计算星期Window.UI计算星期Button;
            #endregion

            // 在 “txtYear” 文本框 中键入“2019”
            uITxtYearEdit.Text = this.RecordedInputDateParams.UITxtYearEditText;

            // 在 “txtYear” 文本框 中键入“{Tab}”
            Keyboard.SendKeys(uITxtYearEdit, this.RecordedInputDateParams.UITxtYearEditSendKeys, ModifierKeys.None);

            // 在 “txtMonth” 文本框 中键入“3”
            uITxtMonthEdit.Text = this.RecordedInputDateParams.UITxtMonthEditText;

            // 在 “txtMonth” 文本框 中键入“{Tab}”
            Keyboard.SendKeys(uITxtMonthEdit, this.RecordedInputDateParams.UITxtMonthEditSendKeys, ModifierKeys.None);

            // 在 “txtDay” 文本框 中键入“3”
            uITxtDayEdit.Text = this.RecordedInputDateParams.UITxtDayEditText;

            // 单击 “计算星期” 按钮
            Mouse.Click(uI计算星期Button, new Point(48, 16));
        }
        
        /// <summary>
        /// 输入年月日计算n天后日期
        /// </summary>
        public void RecordedInputDate_Days()
        {
            #region Variable Declarations
            WinEdit uITxtYearEdit = this.UIDateTime的使用Window.UITxtYearWindow.UITxtYearEdit;
            WinEdit uITxtMonthEdit = this.UIDateTime的使用Window.UITxtMonthWindow.UITxtMonthEdit;
            WinEdit uITxtDayEdit = this.UIDateTime的使用Window.UITxtDayWindow.UITxtDayEdit;
            WinButton uI计算Button = this.UIDateTime的使用Window.UI计算Window.UI计算Button;
            #endregion

            // 在 “txtYear” 文本框 中键入“201”
            uITxtYearEdit.Text = this.RecordedInputDate_DaysParams.UITxtYearEditText;

            // 在 “txtMonth” 文本框 中键入“”
            uITxtMonthEdit.Text = this.RecordedInputDate_DaysParams.UITxtMonthEditText;

            // 在 “txtDay” 文本框 中键入“”
            uITxtDayEdit.Text = this.RecordedInputDate_DaysParams.UITxtDayEditText;

            // 单击 “计算” 按钮
            Mouse.Click(uI计算Button, new Point(43, 23));
        }
        
        /// <summary>
        /// 输入年月日n天的检查
        /// </summary>
        public void RecordedInputDate_Days1()
        {
            #region Variable Declarations
            WinEdit uITxtYearEdit = this.UIDateTime的使用Window.UITxtYearWindow.UITxtYearEdit;
            WinEdit uITxtMonthEdit = this.UIDateTime的使用Window.UITxtMonthWindow.UITxtMonthEdit;
            WinEdit uITxtDayEdit = this.UIDateTime的使用Window.UITxtDayWindow.UITxtDayEdit;
            WinEdit uITxtSpanEdit = this.UIDateTime的使用Window.UITxtSpanWindow.UITxtSpanEdit;
            WinButton uI计算Button = this.UIDateTime的使用Window.UI计算Window.UI计算Button;
            #endregion

            // 在 “txtYear” 文本框 中键入“2019”
            uITxtYearEdit.Text = this.RecordedInputDate_Days1Params.UITxtYearEditText;

            // 在 “txtYear” 文本框 中键入“{Tab}”
            Keyboard.SendKeys(uITxtYearEdit, this.RecordedInputDate_Days1Params.UITxtYearEditSendKeys, ModifierKeys.None);

            // 在 “txtMonth” 文本框 中键入“3”
            uITxtMonthEdit.Text = this.RecordedInputDate_Days1Params.UITxtMonthEditText;

            // 在 “txtMonth” 文本框 中键入“{Tab}”
            Keyboard.SendKeys(uITxtMonthEdit, this.RecordedInputDate_Days1Params.UITxtMonthEditSendKeys, ModifierKeys.None);

            // 在 “txtDay” 文本框 中键入“3”
            uITxtDayEdit.Text = this.RecordedInputDate_Days1Params.UITxtDayEditText;

            // 在 “txtSpan” 文本框 中键入“23”
            uITxtSpanEdit.Text = this.RecordedInputDate_Days1Params.UITxtSpanEditText;

            // 单击 “计算” 按钮
            Mouse.Click(uI计算Button, new Point(46, 24));
        }
        
        #region Properties
        public virtual AssertInputDateExpectedValues AssertInputDateExpectedValues
        {
            get
            {
                if ((this.mAssertInputDateExpectedValues == null))
                {
                    this.mAssertInputDateExpectedValues = new AssertInputDateExpectedValues();
                }
                return this.mAssertInputDateExpectedValues;
            }
        }
        
        public virtual AssertInputDate_DaysExpectedValues AssertInputDate_DaysExpectedValues
        {
            get
            {
                if ((this.mAssertInputDate_DaysExpectedValues == null))
                {
                    this.mAssertInputDate_DaysExpectedValues = new AssertInputDate_DaysExpectedValues();
                }
                return this.mAssertInputDate_DaysExpectedValues;
            }
        }
        
        public virtual AssertInputDate_Days1ExpectedValues AssertInputDate_Days1ExpectedValues
        {
            get
            {
                if ((this.mAssertInputDate_Days1ExpectedValues == null))
                {
                    this.mAssertInputDate_Days1ExpectedValues = new AssertInputDate_Days1ExpectedValues();
                }
                return this.mAssertInputDate_Days1ExpectedValues;
            }
        }
        
        public virtual AssertMondayExpectedValues AssertMondayExpectedValues
        {
            get
            {
                if ((this.mAssertMondayExpectedValues == null))
                {
                    this.mAssertMondayExpectedValues = new AssertMondayExpectedValues();
                }
                return this.mAssertMondayExpectedValues;
            }
        }
        
        public virtual Assert合法日期ExpectedValues Assert合法日期ExpectedValues
        {
            get
            {
                if ((this.mAssert合法日期ExpectedValues == null))
                {
                    this.mAssert合法日期ExpectedValues = new Assert合法日期ExpectedValues();
                }
                return this.mAssert合法日期ExpectedValues;
            }
        }
        
        public virtual Assert年月日ExpectedValues Assert年月日ExpectedValues
        {
            get
            {
                if ((this.mAssert年月日ExpectedValues == null))
                {
                    this.mAssert年月日ExpectedValues = new Assert年月日ExpectedValues();
                }
                return this.mAssert年月日ExpectedValues;
            }
        }
        
        public virtual RecordedInputDateParams RecordedInputDateParams
        {
            get
            {
                if ((this.mRecordedInputDateParams == null))
                {
                    this.mRecordedInputDateParams = new RecordedInputDateParams();
                }
                return this.mRecordedInputDateParams;
            }
        }
        
        public virtual RecordedInputDate_DaysParams RecordedInputDate_DaysParams
        {
            get
            {
                if ((this.mRecordedInputDate_DaysParams == null))
                {
                    this.mRecordedInputDate_DaysParams = new RecordedInputDate_DaysParams();
                }
                return this.mRecordedInputDate_DaysParams;
            }
        }
        
        public virtual RecordedInputDate_Days1Params RecordedInputDate_Days1Params
        {
            get
            {
                if ((this.mRecordedInputDate_Days1Params == null))
                {
                    this.mRecordedInputDate_Days1Params = new RecordedInputDate_Days1Params();
                }
                return this.mRecordedInputDate_Days1Params;
            }
        }
        
        public UIDateTime的使用Window UIDateTime的使用Window
        {
            get
            {
                if ((this.mUIDateTime的使用Window == null))
                {
                    this.mUIDateTime的使用Window = new UIDateTime的使用Window();
                }
                return this.mUIDateTime的使用Window;
            }
        }
        #endregion
        
        #region Fields
        private AssertInputDateExpectedValues mAssertInputDateExpectedValues;
        
        private AssertInputDate_DaysExpectedValues mAssertInputDate_DaysExpectedValues;
        
        private AssertInputDate_Days1ExpectedValues mAssertInputDate_Days1ExpectedValues;
        
        private AssertMondayExpectedValues mAssertMondayExpectedValues;
        
        private Assert合法日期ExpectedValues mAssert合法日期ExpectedValues;
        
        private Assert年月日ExpectedValues mAssert年月日ExpectedValues;
        
        private RecordedInputDateParams mRecordedInputDateParams;
        
        private RecordedInputDate_DaysParams mRecordedInputDate_DaysParams;
        
        private RecordedInputDate_Days1Params mRecordedInputDate_Days1Params;
        
        private UIDateTime的使用Window mUIDateTime的使用Window;
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertInputDate”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class AssertInputDateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “请在年、月、日中输入数字!” 标签 包含“请在年、月、日中输入数字!”的“DisplayText”属性
        /// </summary>
        public string UI请在年月日中输入数字TextDisplayText = "请在年、月、日中输入数字!";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertInputDate_Days”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class AssertInputDate_DaysExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “请在年、月、日中输入数字!” 标签 等于“请在年、月、日中输入数字!”的“DisplayText”属性
        /// </summary>
        public string UI请在年月日中输入数字TextDisplayText = "请在年、月、日中输入数字!";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertInputDate_Days1”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class AssertInputDate_Days1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “2019年3月26日 星期二” 标签 包含“2019年5月23日 星期四”的“DisplayText”属性
        /// </summary>
        public string UIItem2019年3月26日星期二TextDisplayText = "2019年5月23日 星期四";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“AssertMonday”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class AssertMondayExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “Monday” 标签 等于“Monday”的“DisplayText”属性
        /// </summary>
        public string UIMondayTextDisplayText = "Monday";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“Assert合法日期”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class Assert合法日期ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “请输入合法的日期！” 标签 等于“请输入合法的日期！”的“DisplayText”属性
        /// </summary>
        public string UI请输入合法的日期TextDisplayText = "请输入合法的日期！";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“Assert年月日”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class Assert年月日ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 确认 “请在年、月、日中输入数字!” 标签 等于“请在年、月、日中输入数字!”的“DisplayText”属性
        /// </summary>
        public string UI请在年月日中输入数字TextDisplayText = "请在年、月、日中输入数字!";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“RecordedInputDate”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class RecordedInputDateParams
    {
        
        #region Fields
        /// <summary>
        /// 在 “txtYear” 文本框 中键入“2019”
        /// </summary>
        public string UITxtYearEditText = "2019";
        
        /// <summary>
        /// 在 “txtYear” 文本框 中键入“{Tab}”
        /// </summary>
        public string UITxtYearEditSendKeys = "{Tab}";
        
        /// <summary>
        /// 在 “txtMonth” 文本框 中键入“3”
        /// </summary>
        public string UITxtMonthEditText = "3";
        
        /// <summary>
        /// 在 “txtMonth” 文本框 中键入“{Tab}”
        /// </summary>
        public string UITxtMonthEditSendKeys = "{Tab}";
        
        /// <summary>
        /// 在 “txtDay” 文本框 中键入“3”
        /// </summary>
        public string UITxtDayEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“RecordedInputDate_Days”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class RecordedInputDate_DaysParams
    {
        
        #region Fields
        /// <summary>
        /// 在 “txtYear” 文本框 中键入“201”
        /// </summary>
        public string UITxtYearEditText = "201";
        
        /// <summary>
        /// 在 “txtMonth” 文本框 中键入“”
        /// </summary>
        public string UITxtMonthEditText = "";
        
        /// <summary>
        /// 在 “txtDay” 文本框 中键入“”
        /// </summary>
        public string UITxtDayEditText = "";
        #endregion
    }
    
    /// <summary>
    /// 要传递到“RecordedInputDate_Days1”中的参数
    /// </summary>
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class RecordedInputDate_Days1Params
    {
        
        #region Fields
        /// <summary>
        /// 在 “txtYear” 文本框 中键入“2019”
        /// </summary>
        public string UITxtYearEditText = "2019";
        
        /// <summary>
        /// 在 “txtYear” 文本框 中键入“{Tab}”
        /// </summary>
        public string UITxtYearEditSendKeys = "{Tab}";
        
        /// <summary>
        /// 在 “txtMonth” 文本框 中键入“3”
        /// </summary>
        public string UITxtMonthEditText = "3";
        
        /// <summary>
        /// 在 “txtMonth” 文本框 中键入“{Tab}”
        /// </summary>
        public string UITxtMonthEditSendKeys = "{Tab}";
        
        /// <summary>
        /// 在 “txtDay” 文本框 中键入“3”
        /// </summary>
        public string UITxtDayEditText = "3";
        
        /// <summary>
        /// 在 “txtSpan” 文本框 中键入“23”
        /// </summary>
        public string UITxtSpanEditText = "23";
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UIDateTime的使用Window : WinWindow
    {
        
        public UIDateTime的使用Window()
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.Name] = "DateTimeFrom";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public UITxtYearWindow UITxtYearWindow
        {
            get
            {
                if ((this.mUITxtYearWindow == null))
                {
                    this.mUITxtYearWindow = new UITxtYearWindow(this);
                }
                return this.mUITxtYearWindow;
            }
        }
        
        public UITxtMonthWindow UITxtMonthWindow
        {
            get
            {
                if ((this.mUITxtMonthWindow == null))
                {
                    this.mUITxtMonthWindow = new UITxtMonthWindow(this);
                }
                return this.mUITxtMonthWindow;
            }
        }
        
        public UITxtDayWindow UITxtDayWindow
        {
            get
            {
                if ((this.mUITxtDayWindow == null))
                {
                    this.mUITxtDayWindow = new UITxtDayWindow(this);
                }
                return this.mUITxtDayWindow;
            }
        }
        
        public UI计算星期Window UI计算星期Window
        {
            get
            {
                if ((this.mUI计算星期Window == null))
                {
                    this.mUI计算星期Window = new UI计算星期Window(this);
                }
                return this.mUI计算星期Window;
            }
        }
        
        public UI请在年月日中输入数字Window UI请在年月日中输入数字Window
        {
            get
            {
                if ((this.mUI请在年月日中输入数字Window == null))
                {
                    this.mUI请在年月日中输入数字Window = new UI请在年月日中输入数字Window(this);
                }
                return this.mUI请在年月日中输入数字Window;
            }
        }
        
        public UI计算Window UI计算Window
        {
            get
            {
                if ((this.mUI计算Window == null))
                {
                    this.mUI计算Window = new UI计算Window(this);
                }
                return this.mUI计算Window;
            }
        }
        
        public UITxtSpanWindow UITxtSpanWindow
        {
            get
            {
                if ((this.mUITxtSpanWindow == null))
                {
                    this.mUITxtSpanWindow = new UITxtSpanWindow(this);
                }
                return this.mUITxtSpanWindow;
            }
        }
        
        public UIItem2019年3月26日星期二Window UIItem2019年3月26日星期二Window
        {
            get
            {
                if ((this.mUIItem2019年3月26日星期二Window == null))
                {
                    this.mUIItem2019年3月26日星期二Window = new UIItem2019年3月26日星期二Window(this);
                }
                return this.mUIItem2019年3月26日星期二Window;
            }
        }
        #endregion
        
        #region Fields
        private UITxtYearWindow mUITxtYearWindow;
        
        private UITxtMonthWindow mUITxtMonthWindow;
        
        private UITxtDayWindow mUITxtDayWindow;
        
        private UI计算星期Window mUI计算星期Window;
        
        private UI请在年月日中输入数字Window mUI请在年月日中输入数字Window;
        
        private UI计算Window mUI计算Window;
        
        private UITxtSpanWindow mUITxtSpanWindow;
        
        private UIItem2019年3月26日星期二Window mUIItem2019年3月26日星期二Window;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UITxtYearWindow : WinWindow
    {
        
        public UITxtYearWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtYear";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtYearEdit
        {
            get
            {
                if ((this.mUITxtYearEdit == null))
                {
                    this.mUITxtYearEdit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITxtYearEdit.SearchProperties[WinEdit.PropertyNames.Name] = "请输入日期：";
                    this.mUITxtYearEdit.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUITxtYearEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtYearEdit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UITxtMonthWindow : WinWindow
    {
        
        public UITxtMonthWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMonth";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtMonthEdit
        {
            get
            {
                if ((this.mUITxtMonthEdit == null))
                {
                    this.mUITxtMonthEdit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITxtMonthEdit.SearchProperties[WinEdit.PropertyNames.Name] = "年";
                    this.mUITxtMonthEdit.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUITxtMonthEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtMonthEdit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UITxtDayWindow : WinWindow
    {
        
        public UITxtDayWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtDay";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtDayEdit
        {
            get
            {
                if ((this.mUITxtDayEdit == null))
                {
                    this.mUITxtDayEdit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITxtDayEdit.SearchProperties[WinEdit.PropertyNames.Name] = "月";
                    this.mUITxtDayEdit.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUITxtDayEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtDayEdit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UI计算星期Window : WinWindow
    {
        
        public UI计算星期Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnWeek";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinButton UI计算星期Button
        {
            get
            {
                if ((this.mUI计算星期Button == null))
                {
                    this.mUI计算星期Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI计算星期Button.SearchProperties[WinButton.PropertyNames.Name] = "计算星期";
                    this.mUI计算星期Button.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUI计算星期Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI计算星期Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UI请在年月日中输入数字Window : WinWindow
    {
        
        public UI请在年月日中输入数字Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblWeek";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinText UI请在年月日中输入数字Text
        {
            get
            {
                if ((this.mUI请在年月日中输入数字Text == null))
                {
                    this.mUI请在年月日中输入数字Text = new WinText(this);
                    #region 搜索条件
                    this.mUI请在年月日中输入数字Text.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUI请在年月日中输入数字Text;
            }
        }
        
        public WinText UI请输入合法的日期Text
        {
            get
            {
                if ((this.mUI请输入合法的日期Text == null))
                {
                    this.mUI请输入合法的日期Text = new WinText(this);
                    #region 搜索条件
                    this.mUI请输入合法的日期Text.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUI请输入合法的日期Text;
            }
        }
        
        public WinText UIMondayText
        {
            get
            {
                if ((this.mUIMondayText == null))
                {
                    this.mUIMondayText = new WinText(this);
                    #region 搜索条件
                    this.mUIMondayText.SearchProperties[WinText.PropertyNames.Name] = "Monday";
                    this.mUIMondayText.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUIMondayText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI请在年月日中输入数字Text;
        
        private WinText mUI请输入合法的日期Text;
        
        private WinText mUIMondayText;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UI计算Window : WinWindow
    {
        
        public UI计算Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnDay";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinButton UI计算Button
        {
            get
            {
                if ((this.mUI计算Button == null))
                {
                    this.mUI计算Button = new WinButton(this);
                    #region 搜索条件
                    this.mUI计算Button.SearchProperties[WinButton.PropertyNames.Name] = "计算";
                    this.mUI计算Button.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUI计算Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI计算Button;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UITxtSpanWindow : WinWindow
    {
        
        public UITxtSpanWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtSpan";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtSpanEdit
        {
            get
            {
                if ((this.mUITxtSpanEdit == null))
                {
                    this.mUITxtSpanEdit = new WinEdit(this);
                    #region 搜索条件
                    this.mUITxtSpanEdit.SearchProperties[WinEdit.PropertyNames.Name] = "显示";
                    this.mUITxtSpanEdit.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUITxtSpanEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtSpanEdit;
        #endregion
    }
    
    [GeneratedCode("编码的 UI 测试生成器", "15.0.26208.0")]
    public class UIItem2019年3月26日星期二Window : WinWindow
    {
        
        public UIItem2019年3月26日星期二Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜索条件
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblDate";
            this.WindowTitles.Add("DateTime的使用");
            #endregion
        }
        
        #region Properties
        public WinText UIItem2019年3月26日星期二Text
        {
            get
            {
                if ((this.mUIItem2019年3月26日星期二Text == null))
                {
                    this.mUIItem2019年3月26日星期二Text = new WinText(this);
                    #region 搜索条件
                    this.mUIItem2019年3月26日星期二Text.WindowTitles.Add("DateTime的使用");
                    #endregion
                }
                return this.mUIItem2019年3月26日星期二Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem2019年3月26日星期二Text;
        #endregion
    }
}
